# template
server {
	error_page 405 =200 $uri;
	error_page 400 =200 /echo_error;

	set $local /etc/nginx/echoroot/;

	root $local/www/;
	client_max_body_size 100M;
	proxy_buffering off;
	proxy_buffer_size 16k;
	proxy_buffers 8 16k;


	location = /echo_error {
		internal;
                access_log          $local/log/accesslog-$server_name.$server_port.log;

		content_by_lua_block {ngx.say("dummy")}
	}

	location /cascade/ {
		add_header 'Content-Type' 'application/json';
		echo '{ "first": "5 sec", ';
		echo_flush;
		echo_sleep 1;
		echo ' "second": "4 sec", ';
		echo_flush;
		echo_sleep 1;
		echo ' "third": "3 sec", ';
		echo_flush;
		echo_sleep 1;
		echo ' "fourth": "2 sec", ';
		echo_flush;
		echo_sleep 1;
		echo ' "fifth": "just a sec" ';
		echo_flush;
		echo_sleep 1;
		echo "}";
	}

	location /headers/ {
      		content_by_lua_block { 
			local cjson = require "cjson"
			local body = cjson.encode( ngx.req.get_headers() )
			ngx.say( body )
		}
	}

	location /whoami/ {
      		content_by_lua_block { ngx.say( ngx.var.remote_addr ) }
	}

	location ~ ^/code/(?<code>\d+)$ {
      		content_by_lua_block { ngx.exit( tonumber( ngx.var.code) )} 
	}

	location /reflect/ {

                set $seq "-";
                set $orgres "-";
                set $modresult "-";
                set $modtag "-";
                set $modlist "-";
                set $ip_chain "-";
                set $f_white 1;
                access_log              $local/log/accesslog-$server_name.$server_port.log;
                content_by_lua_block {
			ngx.header.content_type = "application/json"
			--ngx.set_header("Content-Type", "application/json")
			local no_reflect = '{"err":"no reflect"}'
		        ngx.req.read_body()
            		local cjson = require "cjson"
		        local body = ngx.req.get_body_data()
			if body == nil then
			        local file_path = ngx.req.get_body_file()
     				if file_path then
                			local file, err = io.open(file_path, "r")
			                if file then
                        			body = file:read("*a")
                        			file:close()
					end
				end
			end

			--local cjson = require("cjson.safe")
		        local reqbody, err = cjson.decode(body)
			if reqbody == nil or reqbody["reflect"] == nil then
				ngx.say( no_reflect )
				return
			end
			
			local body = cjson.encode( reqbody["reflect"] )
			ngx.header['Content-Length'] = #body + 1
			local sleep = reqbody["sleep"]
			if sleep ~= nil then
				local sleep_time = tonumber(sleep)
				local body_len = #body
				local chunk_len = body_len /sleep_time

				for i = 1, sleep_time do
					ngx.print( body:sub(  chunk_len*(i-1) + 1   ,   chunk_len*(i) ) )
					ngx.flush()
					ngx.sleep( 1 )
					ngx.flush(true)
				end
				ngx.say( body:sub( chunk_len*(sleep_time) + 1, body_len ) )
			else
				ngx.say( body )
			end
			return
		}
        }
	listen 8080;
}

